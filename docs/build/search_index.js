var documenterSearchIndex = {"docs":
[{"location":"pluto_tests_git/","page":"Pluto notebooks","title":"Pluto notebooks","text":"<p>The static version (with no interactive elements) of Pluto notebook with <b>ThermovisorData.jl</b> usage is available at: <a href=\"../ThermovisorData-test.html\">ThermovisorData-test.html</a>\n.</p","category":"page"},{"location":"pluto_tests_git/","page":"Pluto notebooks","title":"Pluto notebooks","text":"Notebook file with ThermovisorData-test.jl usage examples are available at Pluto notebooks.","category":"page"},{"location":"pluto_tests_git/","page":"Pluto notebooks","title":"Pluto notebooks","text":"To run these notebooks, you need:","category":"page"},{"location":"pluto_tests_git/","page":"Pluto notebooks","title":"Pluto notebooks","text":"Install julia language itself from its official download page \nInstall Pluto notebook from julia REPL by entering the following commands ","category":"page"},{"location":"pluto_tests_git/","page":"Pluto notebooks","title":"Pluto notebooks","text":"line-by-line:","category":"page"},{"location":"pluto_tests_git/","page":"Pluto notebooks","title":"Pluto notebooks","text":"import Pkg\nPkg.add(\"Pluto\")\nusing Pluto\nPluto.run()","category":"page"},{"location":"pluto_tests_git/","page":"Pluto notebooks","title":"Pluto notebooks","text":"The last line will launch the Pluto starting page in your default browser ","category":"page"},{"location":"pluto_tests_git/","page":"Pluto notebooks","title":"Pluto notebooks","text":"Copy/Clone the entire GitHub repository to your local folder. As far as ThermovisorData.jl is not a registered package, all files needed to run the notebooks must be in the ../notebooks folder with respect to  note_book_name.jl file location.\nOpen notebook's .jl- file in Pluto by providing the full path to the \"Open a notebook\" text field on Pluto's starting page. As far as Pluto has its own package manager, it will automatically install all necessary dependancies, which are marked in using cell of this file. ","category":"page"},{"location":"thermovisordata/#Functions-and-types-of-ThermovisorData","page":"ThermovisorData","title":"Functions and types of ThermovisorData","text":"","category":"section"},{"location":"thermovisordata/#Main.ThermovisorData.CentredObj","page":"ThermovisorData","title":"Main.ThermovisorData.CentredObj","text":"`CentredObj` is a sort of region of interest (ROI) marker object.\n\nCentredObj has centre coordinates, object's center can be  anywhere with respect to the image indices. ROI also has one or more size parameters (in pixels) coordinates of centre are equal to CartesianIndices, first element is the row index,  the second element is the column index!! (y and x coordinate) This is opposite to the ImageDraw, where first Point coordinate corresponds to the column index and  the second one to the row index. CentredObj can also be used as for indexing image[c] - returns all elements of image within c, image[c]=x sets all elements of image to the values of x, x firstindex  should be 1. CentredObj can also be used to set all image points within the ROI to a single value. e.g. image[c] = 30 \n\nTo impement CentredObj abstraction one needs to implement: *is_within - function to check if inds are within the CentredObj\n\n*line_within_mask - function to check if all line points are within the CentredObj\n\n*fill_x0! - function to fill the optimization starting vector during CentredObj  fitting the image\n\n*convert_to_drawable fucntion to convert the CentredObj to a drawable obj for ImageDraw\n\n\n\n\n\n","category":"type"},{"location":"thermovisordata/#Main.ThermovisorData.CircleObj","page":"ThermovisorData","title":"Main.ThermovisorData.CircleObj","text":"Circle object with defined diemeter\n\n\n\n\n\n","category":"type"},{"location":"thermovisordata/#Main.ThermovisorData.FilteredImage","page":"ThermovisorData","title":"Main.ThermovisorData.FilteredImage","text":"    Type to store image with filtered temperature region\n\n:full - filtered rescaled image of the same size as the input with all pixels which are not the part of the pattern with label value  :regionindices - cartesian indices of the pattern in the input image :reduced - image of reduced size where all not-inpatter pixels removed       (the \tscaling of this image is the same as of the input imag.initial      see RescaledImage type ) :reducedflag - bitmatrix version of (reduced)\n\n\n\n\n\n","category":"type"},{"location":"thermovisordata/#Main.ThermovisorData.RectangleObj","page":"ThermovisorData","title":"Main.ThermovisorData.RectangleObj","text":"Rectangular object with defined two sides\n\n\n\n\n\n","category":"type"},{"location":"thermovisordata/#Main.ThermovisorData.RescaledImage","page":"ThermovisorData","title":"Main.ThermovisorData.RescaledImage","text":"    RescaledImage - structure stores the image data mapped to region  [0,1]\n\ninitial  - initial image before rescaling sz - size of the image min - minimum value max  - maximum value im - image with all values from 0 to 1 \n\n\n\n\n\n","category":"type"},{"location":"thermovisordata/#Main.ThermovisorData.SquareObj","page":"ThermovisorData","title":"Main.ThermovisorData.SquareObj","text":"Square with defined center and side\n\n\n\n\n\n","category":"type"},{"location":"thermovisordata/#Base.getindex-Tuple{AbstractMatrix, CentredObj}","page":"ThermovisorData","title":"Base.getindex","text":"Base.getindex(img::AbstractMatrix,c::CentredObj)\n\nCentredObj can be used for matrix indexing, image[centred_object] - returns the vector  of temperatures of all points of image lying within the centred_object of CentredObj\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Base.length-Tuple{CentredObj}","page":"ThermovisorData","title":"Base.length","text":"Base.length(c::CentredObj)\n\nTotal number of values needed to create CentredObj of specified type\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Base.setindex!-Tuple{Matrix, Array, CentredObj}","page":"ThermovisorData","title":"Base.setindex!","text":"Base.setindex!(img::Matrix,x::Array,c::CentredObj)\n\nimg[c]=x assignes all x elements to the elements of img with indices lying within the CentredObj c\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Base.setindex!-Union{Tuple{T}, Tuple{Matrix{T}, Number, CentredObj}} where T","page":"ThermovisorData","title":"Base.setindex!","text":"Base.setindex!(img::Matrix{T},x::Number,c::CentredObj) where T\n\nSetting all elements within the CentredObj to a single value\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData._inbounds_flag-NTuple{4, Any}","page":"ThermovisorData","title":"Main.ThermovisorData._inbounds_flag","text":"_inbounds_flag(L,D,max_length,min_length)\n\nUnsafe version of check! number of  rows in `D` should be the same as the number of \nelements in `L`\nReturns Bool flag of all row not containing NaN's and lying within the min_length to max_length range\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.add_distrib_point!-NTuple{4, Any}","page":"ThermovisorData","title":"Main.ThermovisorData.add_distrib_point!","text":"add_distrib_point!(points,distrib,point,value)\n\nInternal fucntion to add the point to distribution\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.along_line_distribution-Union{Tuple{T}, Tuple{AbstractMatrix{T}, Vararg{Any, 4}}} where T","page":"ThermovisorData","title":"Main.ThermovisorData.along_line_distribution","text":"along_line_distribution(img::AbstractMatrix{T},x0,y0,x1,y1) where T\n\nFunction evaluates matrix values distribution along the line specified by two coordinates,  img - input image  returns the tuple of two vectors: coordinates and values  see ImageDraw.bresenham for details of finding the points of the line \n\nreturns  points - vector of coordinates along the line distrib - distribution\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.along_line_distribution_xiaolin_wu-Union{Tuple{T}, Tuple{AbstractMatrix{T}, Vararg{Any, 4}}} where T","page":"ThermovisorData","title":"Main.ThermovisorData.along_line_distribution_xiaolin_wu","text":"along_line_distribution_xiaolin_wu(img::AbstractMatrix{T}, y0, x0, y1, x1) where T\n\nEvaluates the value matrix content along the line with endpoint coordinates x0,y0,y1,x1, returns indices of all points. As far as Wu's algorithm returns two adjacent points the value is evaluated as an average of two point obtained with Wu's algorithm\n\nsee  xiaolin_wu function from ImageDraw \n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.along_mask_line_distribution","page":"ThermovisorData","title":"Main.ThermovisorData.along_mask_line_distribution","text":"along_mask_line_distribution(imag::AbstractMatrix,c::CentredObj,direction_angle=0.0,line_length=10.0;\n                                                                                            length_per_pixel=1.0,\n                                                                                            use_wu::Bool=false)\n\nThe same as within_mask_line_points_distribution but returns the line length along the coordinates within the  image.\n\nline_length - the length of line in the same units as length_per_pixel. The calibration using mm_per_pixel`, returns calibrated length along the line \n\n\n\n\n\n","category":"function"},{"location":"thermovisordata/#Main.ThermovisorData.angular_distribution_statistics-Tuple{Any, Any, Any}","page":"ThermovisorData","title":"Main.ThermovisorData.angular_distribution_statistics","text":"angular_distribution_statistics(angles,along_length_coordinate,distrib;\n                            max_length=-1.0,is_use_student::Bool=true)\n\nFunction evaluates average temperature distribution vs angle of orientation\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.area-Tuple{CentredObj}","page":"ThermovisorData","title":"Main.ThermovisorData.area","text":"Ealuates the surface area\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.cent_to_flag-Tuple{CentredObj, Tuple{Int64, Int64}}","page":"ThermovisorData","title":"Main.ThermovisorData.cent_to_flag","text":"cent_to_flag(c::CentredObj,sz::Tuple{Int,Int};external=false)\n\nConverts CentredObj to bitmatrix  of size sz\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.cent_to_flag-Union{Tuple{T}, Tuple{Type{T}, CentredObj, Tuple{Int64, Int64}}} where T<:Union{BitMatrix, Matrix{Bool}}","page":"ThermovisorData","title":"Main.ThermovisorData.cent_to_flag","text":"cent_to_flag(::Type{T},c::CentredObj,sz::Tuple{Int,Int};external=false) where T<:FlagMatrix\n\nConverts centred obj to BitMatrix of the Matrix of bool see `FlagMatrix\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.center-Tuple{CentredObj}","page":"ThermovisorData","title":"Main.ThermovisorData.center","text":"center(c::CentredObj)\n\nReturns objects central point \n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.convert_to_drawable-Tuple{CentredObj}","page":"ThermovisorData","title":"Main.ThermovisorData.convert_to_drawable","text":"convert_to_drawable(::CentredObj)\n\nConverts CentredObj to a drawable structure appropriate to the ImageDraw draw function, polygon,ellipse see [ImageDraw.draw] function \n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.copyobj-Tuple{T} where T<:CentredObj","page":"ThermovisorData","title":"Main.ThermovisorData.copyobj","text":"    copyobj(c::T) where T<:CentreObj\n\nCopies the CentredObj creating new instance\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.diagonal_points-Tuple{Union{CircleObj, SquareObj}}","page":"ThermovisorData","title":"Main.ThermovisorData.diagonal_points","text":"diagonal_points(c::Union{SquareObj,CircleObj})\n\nReturns diagonal points in row-column coordinates\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.dimensions-Tuple{CentredObj}","page":"ThermovisorData","title":"Main.ThermovisorData.dimensions","text":"dimensions(c::CentredObj)\n\nReturn dimentional parameters (vector)\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.draw!-Tuple{Matrix{Float64}, CentredObj}","page":"ThermovisorData","title":"Main.ThermovisorData.draw!","text":"draw!(image::Matrix{Float64},c::CentredObj;fill=false,thickness::Int=55,color::RGB{Float64}=RGB{Float64}(0,1,0), kwargs...)\n\nDraws CentreObj inside the image.\n\nimage - image c - object  fill - if true the interior of the object will be filled  thickness - the thickness of the object's frame color - frame and filling color \n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.draw-Tuple{CentredObj}","page":"ThermovisorData","title":"Main.ThermovisorData.draw","text":"draw(c::CentredObj;kwargs...)\n\nReturns CentredObj image of minimal possible size\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.external_flag_from_marker-Union{Tuple{Matrix{T}}, Tuple{T}} where T<:Int64","page":"ThermovisorData","title":"Main.ThermovisorData.external_flag_from_marker","text":"external_flag_from_marker(markers::Matrix{Int};label=0,external=true)\n\nConverts patterns markers matrix (image where each pattern marked with its own integer)  to flag matrix of region external (if external is true) of internal otherwise ,  if label equals zero  looks for  pattern with maximal number of pixels\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.fill_from_vect!-Tuple{CentredObj, AbstractVector}","page":"ThermovisorData","title":"Main.ThermovisorData.fill_from_vect!","text":"fill_from_vect!(c::CentredObj, v::AbstractVector)\n\nFills CentreObj parameters from the vector [centerindex1,centerindex2,dimention1,dimention2,...]\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.fill_im!-Tuple{Any, CentredObj}","page":"ThermovisorData","title":"Main.ThermovisorData.fill_im!","text":"`fill_im!(img,c::CentreObj)`\n\nFills bitmatrix img in a way that all pixels which are  within the CentreObj are set to true.  See also is_within\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.fill_im_external!-Tuple{Union{BitMatrix, Matrix{Bool}}, CentredObj}","page":"ThermovisorData","title":"Main.ThermovisorData.fill_im_external!","text":"fill_im_external!(img::FlagMatrix,c::CentredObj)\n\nFills image matrix img in a way that all pixels which are  not within the CentreObj set to true.  See also is_within\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.fill_x0!-Tuple{Any, AbstractMatrix, CentredObj}","page":"ThermovisorData","title":"Main.ThermovisorData.fill_x0!","text":"    fill_x0!(x0,im_bin::AbstractMatrix,c::CentredObj)\n\nFills the optimization starting vector by seraching the centre of the image im_bin\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.fill_x0!-Tuple{Any, Union{BitMatrix, Matrix{Bool}}, CircleObj}","page":"ThermovisorData","title":"Main.ThermovisorData.fill_x0!","text":"fill_x0!(x0,im_bin::FlagMatrix,::CircleObj)\n\nFills starting vector for the optimization of CentredObj\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.filter_image!-Tuple{AbstractMatrix, Union{BitMatrix, Matrix{Bool}}}","page":"ThermovisorData","title":"Main.ThermovisorData.filter_image!","text":"filter_image!(imag::AbstractMatrix,flag::BitMatrix)\n\nReturns FilteredImage taking all elements of imag which are not externalregionflag\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.filter_image!-Tuple{RescaledImage{Float64}, Union{BitMatrix, Matrix{Bool}}}","page":"ThermovisorData","title":"Main.ThermovisorData.filter_image!","text":"filter_image!(imag::RescaledImage{Float64},external_region_flag::FlagMatrix)::FilteredImage\n\nIn-place filtering of RescaledImage\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.filter_image-Tuple{AbstractMatrix, CentredObj}","page":"ThermovisorData","title":"Main.ThermovisorData.filter_image","text":"filter_image(imag::AbstractMatrix,c::CentredObj;external=false)\n\nFilters image according to centered object creating new image if external  is true than as a filtering flag the inverse of centered object image is taken\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.filter_image-Tuple{RescaledImage, CentredObj}","page":"ThermovisorData","title":"Main.ThermovisorData.filter_image","text":"filter_image(imag::RescaledImage,c::CentredObj;external=false)\n\nFilters image according \n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.filter_image-Tuple{RescaledImage, Matrix{Int64}}","page":"ThermovisorData","title":"Main.ThermovisorData.filter_image","text":"    `filter_image(imag::RescaledImage,markers;label=0)`\n\nFuntion zeroes all pixels of the image, except those belonging to the specified pattern. image - rescaled image (see RescaledImage type) markers - the matrix of the same size as the input image, each element of this matrix has unique value-label associated with some pattern.  Function label_components returns the markers matrix. (optional) - the value of the label to be selected as a pattern marker\n\nFunction returns FilteredImage object\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.find_temperature_files","page":"ThermovisorData","title":"Main.ThermovisorData.find_temperature_files","text":"    `find_temperature_files(folder::AbstractString)`\n\nSearchs the folder for thermal images files using is_temperature_file Returns dictionary Dict{String,Pair{Float64,String}} with keys parts of files matched  using is_temperature_file, values - are temperature pairs of Float64 => full-file-name When file name contains \"BB\" it supposed to be the blackbody themperature distribution       \n\n\n\n\n\n","category":"function"},{"location":"thermovisordata/#Main.ThermovisorData.fit_centred_obj!","page":"ThermovisorData","title":"Main.ThermovisorData.fit_centred_obj!","text":"fit_centred_obj!(c::CentredObj,im_bin::FlagMatrix,x0=nothing;\n                            optimizer = NelderMead())\n\nFits centred obj to binary image by adjusting centre coordinates and dimentions x0 - staring vector \n\n\n\n\n\n","category":"function"},{"location":"thermovisordata/#Main.ThermovisorData.fit_centred_obj!-2","page":"ThermovisorData","title":"Main.ThermovisorData.fit_centred_obj!","text":"fit_centred_obj!(c::CentredObj,image::FilteredImage,x0=nothing;fit_reduced::Bool=true)\n\nFits CentredObj (modified) to filtered image (not modified) fit_reduced flag (default=true) indicates what version of the image should be fitted if true -  reduced otherwise - full image \n\n\n\n\n\n","category":"function"},{"location":"thermovisordata/#Main.ThermovisorData.full_image_flag-Tuple{FilteredImage}","page":"ThermovisorData","title":"Main.ThermovisorData.full_image_flag","text":"full_image_flag(filtered_im::FilteredImage)\n\nReturns the BitMatrix flag of filtered pattern in the whole image. Can be used as index matrix in the full image e.g.:  filtered_image.full.initial[ull_image_flag(filtered_image)] will return   all elements which belong to the pattern\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.image_discr-Tuple{Any, Any}","page":"ThermovisorData","title":"Main.ThermovisorData.image_discr","text":"image_discr(im1,im2)\n\nCalculates the scalar distance between two matrices by checking the equality of their elements\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.image_fill_discr-Tuple{AbstractMatrix, CentredObj}","page":"ThermovisorData","title":"Main.ThermovisorData.image_fill_discr","text":"Function returns the function to evaluate the discrepancy  between  CentredObj and the matrix, this function is used during the fitting procedure \n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.is_temperature_file-Tuple{AbstractString}","page":"ThermovisorData","title":"Main.ThermovisorData.is_temperature_file","text":"    `is_temperature_file(file_name::AbstractString)`\n\nChecks if the file with file_name has an appropriate name for thermovisor temperature distribution file\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.is_within-Tuple{CentredObj, Any}","page":"ThermovisorData","title":"Main.ThermovisorData.is_within","text":"is_within(c::CentredObj,_)\n\nFunction to check if indices are within CentredObj\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.is_within-Tuple{CentredObj, CartesianIndex}","page":"ThermovisorData","title":"Main.ThermovisorData.is_within","text":"is_within(c::CentredObj,i::CartesianIndex)\n\nCartesianIndex support\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.is_within_iterator-Tuple{AbstractMatrix, CentredObj}","page":"ThermovisorData","title":"Main.ThermovisorData.is_within_iterator","text":"is_within_iterator(img::AbstractMatrix,c::CentredObj)\n\nIterator over all CartesianIndices within the img which are within the CentredObj c\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.line_points_to_along_length-Union{Tuple{T}, Tuple{Vector{T}, Any}} where T","page":"ThermovisorData","title":"Main.ThermovisorData.line_points_to_along_length","text":"line_points_to_along_length(along_line_points::Vector{T},line_points) where T\n\nConverts Cartesian indices of `along_line_points` to the length along line\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.line_within_mask-Tuple{CentredObj, Float64, Int64}","page":"ThermovisorData","title":"Main.ThermovisorData.line_within_mask","text":"line_within_mask(c::CentredObj,ang::Float64,line_length::Int)\n\nFunction returns endpoint of the line lying fully within the mask  - tuple of four point which can be  directly splatted to the alonglinedistribution\n\nang - angle in degrees \nline_length - the length of line   \n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.line_within_mask-Tuple{CircleObj, Any, Any}","page":"ThermovisorData","title":"Main.ThermovisorData.line_within_mask","text":"line_within_mask(c::CircleObj,ang,line_length)\n\nReturns two endpoints of the line lying totally inside the CentredObj\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.marker_image-Tuple{RescaledImage}","page":"ThermovisorData","title":"Main.ThermovisorData.marker_image","text":"marker_image(rescaled::RescaledImage,level_threshold::Float64,distance_threshold::Float64=1e-3)\n\nMarkers image patterns, input umage is RescaledImage image type,  levelthreshold  - should be between 0.0 and 1.0 distancethreshold  - criterium of image binarization after distance transform\n\nreturns markers  - matrix of Int's with the same size as the input matrix, each element  of markers is the label index of individual patterns of the initial image\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.mean_within_mask-Tuple{AbstractMatrix, CentredObj}","page":"ThermovisorData","title":"Main.ThermovisorData.mean_within_mask","text":"mean_within_mask(img::AbstractMatrix,c::CentredObj)\n\nEvaluates the average temperature of all points within the CentredObj marker\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.obj_from_vect-Union{Tuple{T}, Tuple{Type{T}, AbstractVector}} where T<:CentredObj","page":"ThermovisorData","title":"Main.ThermovisorData.obj_from_vect","text":"obj_from_vect(::Type{CentredObj},v::AbstractVector)\n\nCreates object from parameters vector, first two arguments are center point other are dimentions [center[1],center[2],dimentions[1],...]\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.plot_along_line_distribution-Tuple{Any, Any}","page":"ThermovisorData","title":"Main.ThermovisorData.plot_along_line_distribution","text":"plot_along_line_distribution(along_line_length,along_line_distribution;\n                                    length_scaler::Float64=1.0,\n                                    is_centered::Bool=true,kwargs...)\n\nPlots temperature distribution along the line along_line_length - coordinates, along_line_distribution - values of temperature, length_scaler - length scaler  (can be used to convert pixels to the actual length) is_centered - the line length is converted to the coordinates with zero value in  the centre of the CentredObj\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.plot_angular_distribution_statistics-Union{Tuple{T}, Tuple{Any, T, T}, Tuple{Any, T, T, Union{Nothing, T}}, Tuple{Any, T, T, Union{Nothing, T}, Union{Nothing, T}}} where T<:(AbstractVector)","page":"ThermovisorData","title":"Main.ThermovisorData.plot_angular_distribution_statistics","text":"plot_angular_distribution_statistics(angles,mean_D::T,std_D::T,\n            lower_bound::Union{T,Nothing}=nothing,upper_bound::Union{T,Nothing}=nothing;\n            length_scaler::Float64=1.0,\n            label=nothing,\n            minorgrid=true,\n            gridlinewidth=2,\n            title=\"Average temperature angular distribution\",framestyle = :box,\n            dpi=600,xlabel = L\"Angle  ,°\", ylabel=L\"Temperature °C\",\n            kwargs...)      where T<:AbstractVector\n\nThe same as plot_radial_distribution_statistics but plots averaged angular distribution\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.plot_radial_distribution_statistics-Union{Tuple{T}, Tuple{Any, T, T}, Tuple{Any, T, T, Union{Nothing, T}}, Tuple{Any, T, T, Union{Nothing, T}, Union{Nothing, T}}} where T<:(AbstractVector)","page":"ThermovisorData","title":"Main.ThermovisorData.plot_radial_distribution_statistics","text":"plot_radial_distribution_statistics(L,mean_D::T,std_D::T,\n    lower_bound::Union{T,Nothing}=nothing,upper_bound::Union{T,Nothing}=nothing;\n            length_scaler::Float64=1.0,\n            is_centered::Bool=true,label=nothing,\n            minorgrid=true,gridlinewidth=2,title=\"Average temperature radial distribution\",\n            framestyle = :box,\n            dpi=600,xlabel = \"Distance  across the sample ,mm\", ylabel=\"Temperature  °C\",\n            kwargs...)      where T<:AbstractVector\n\nPlots radial ditribution averaged value, confidence bounds and confidence bounds\nmultiplied by the Student's coefficient\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.points_within_line!-Tuple{AbstractMatrix, AbstractVector}","page":"ThermovisorData","title":"Main.ThermovisorData.points_within_line!","text":"points_within_line!(imag::AbstractMatrix,line_points::AbstractVector)\n\nForces all line points to lie within the possible region according toe the image size\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.radial_distribution-Tuple{AbstractMatrix, CentredObj, AbstractRange}","page":"ThermovisorData","title":"Main.ThermovisorData.radial_distribution","text":"radial_distribution(imag::AbstractMatrix,c::CentredObj,angles_range::AbstractRange,line_length;mm_per_pixel=1.0)\n\nCalls along_mask_line_distribution on lines oriented with some angles range and puts the resulting  distribution into one matrix j'th column of this matrix corresponds to the distribution along the line oriented with ang[j] angle\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.radial_distribution_statistics-Tuple{AbstractVector, AbstractVecOrMat}","page":"ThermovisorData","title":"Main.ThermovisorData.radial_distribution_statistics","text":"radial_distribution_statistics(along_length_coordinate,distrib;length_per_pixel=1.0,is_use_student=true)\n\nThis function evaluates mean radial diatribution, it's standard deviation and student's coefficient  Input arguments along_length, distrib -  distribution matrix. All rows of distrib which contains NaNs will be  droped.\n\nOptional:     max_length - maximal value of alonglengthcoordinate to be includet in to the statistics evaluation     is_use_student - flag if use students's coefficient\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.read_temperature_file-Tuple{AbstractString}","page":"ThermovisorData","title":"Main.ThermovisorData.read_temperature_file","text":"read_temperature_file(f_name::AbstractString)\n\nReads temeprature file f_name is a full file name\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.rearranged_diagonal-Tuple{Union{CircleObj, SquareObj}}","page":"ThermovisorData","title":"Main.ThermovisorData.rearranged_diagonal","text":"rearranged_diagonal(c::Union{SquareObj,CircleObj})\n\nReturns diagonal points in x-y coordinates\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.shift!-Tuple{CentredObj, AbstractVector}","page":"ThermovisorData","title":"Main.ThermovisorData.shift!","text":"shift(c::CentredObj,x::AbstractVector)\n\nRelative shift of centred object center\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.std_within_mask-Tuple{AbstractMatrix, CentredObj}","page":"ThermovisorData","title":"Main.ThermovisorData.std_within_mask","text":"std_within_mask(img::AbstractMatrix, c::CentredObj)\n\nEvaluates standard deviation of temperature for all points within the CentredObj marker\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.student_coefficient-Tuple{Int64, Any}","page":"ThermovisorData","title":"Main.ThermovisorData.student_coefficient","text":"student_coefficient(degrees_of_freedom::Int, probability; digits::Int = 3, side::Int = 2)\n\nEvaluates Student's distribution coefficient\n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.to_rgb-Tuple{Matrix{Float64}}","page":"ThermovisorData","title":"Main.ThermovisorData.to_rgb","text":"to_rgb(image::Matrix{Float64};color_scheme::String=\"\")\n\nConverts matrix to rgb martix by applyting the color scheme  using applycolourmap function from PerceptualColourMaps  \n\n\n\n\n\n","category":"method"},{"location":"thermovisordata/#Main.ThermovisorData.within_mask_line_points_distribution","page":"ThermovisorData","title":"Main.ThermovisorData.within_mask_line_points_distribution","text":"within_mask_line_points_distribution(imag::AbstractMatrix,c::CentredObj,direction_angle=0.0,line_length=10.0;use_wu::Bool=false)\n\nFunction evaluates the distribution of values in imag matrix along the line with length line_length in pixels oriented with the angle direction_angle in degrees  with respect to the posistive direction of oX (column index increase),  this line lies within the mask (CentreObj) and goes through its center.\n\nFunction returns:\n\n    `points`  - vector of `CartesianIndex` of image's points lying on the line\n\n    `distrib` - distribution of values\n\n    `line_points` - endpoints of line the Tupple of (left_x,left_Y,right_x,right_y)\n\n\n\n\n\n","category":"function"},{"location":"#ThermovisorData.jl","page":"Home","title":"ThermovisorData.jl","text":"","category":"section"},{"location":"#General-description","page":"Home","title":"General description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ThervisorData.jl is a small package designed to process static thermal images stored as matrices in CSV format, where each matrix element represents a temperature value. It enables users to load images from files, calculate temperature distributions, and compute statistical analyses for temperatures along specified lines. It also calculates averaged angular and radial temperature distributions (along with standard deviations) within Regions of Interest (ROIs) such as circles, squares, and rectangles. These ROI objects can be fitted to thermally distinct areas (relative to their surroundings), such as the most heated regions within the scene.","category":"page"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To contact me, please do it through the GitHub repository.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Copyright (c) 2025 Roman Mironov","category":"page"},{"location":"","page":"Home","title":"Home","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","category":"page"},{"location":"","page":"Home","title":"Home","text":"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.","category":"page"}]
}
